o: output collection of int;

m1: map[array of int] of array of int;
m2: map[set of int] of set of int;
m3: map[stack of int] of stack of int;
m4: map[map[set of int] of set of int] of map[array of int] of array of int;
m5: map[queue of int] of queue of int;
m6: map[list of int] of list of int;


### Testing m1 #############
a1: array of int = {1, 1};
a2: array of int = {2, 2};

m1[a1] = a2;

k1 := keys(m1);
v1 := values(m1);


### Testing m2 #############
s1: set of int;
s2: set of int;
add(s1, 1);
add(s1, 2);
add(s2, 3);

m2[s1] = s2;

k2 := keys(m2);
v2 := values(m2);


### Testing m3 #############
st1: stack of int;
st2: stack of int;
push(st1, 1);
push(st1, 2);
push(st2, 3);

m3[st1] = st2;

k3 := keys(m3);
v3 := values(m3);


### Testing m4 #############
m4[m2] = m1;

k4 := keys(m4);
v4 := values(m4);
k5 := keys(v4[0]);

foreach(i: int; k5[0][i]){
	o << k5[0][i];
}

### Testing m5 #############
q1: queue of int;
q2: queue of int;

offer(q1, 1);
offer(q2, 2);

m5[q1] = q2;

v5 := values(m5);

### Testing m6 #############
l1: list of int;
l2: list of int;

add(l1, 1);
add(l2, 2);

m6[l1] = l2;

v6 := values(m6);