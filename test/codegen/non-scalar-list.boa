o: output collection of int;

l: list of int;
l1: list of array of int;
l2: list of set of int;
l3: list of stack of int;
l4: list of map[int] of int;
l5: list of list of int;
l6: list of queue of int;

### Testing l #############
add(l, 1);
add(l, 2);
n1 := get(l, 0);
get(l, 1);
get(l, 100);
get(l, -1);
n2 := remove(l, 1);
remove(l, 0);
remove(l, -1);
remove(l, 0);
clear(l);

f := function(l: list of int) : list of int {
	add(l, 0);
	return l;
};

f(l);

### Testing l1 #############
a1: array of int = {1, 1};
a2: array of int = {2, 2};

add(l1, a1);
add(l1, a2);

v1 := values(l1);


### Testing l2 #############
ts1: set of int;
ts2: set of int;

add(ts1, 1);
add(ts2, 2);

add(l2, ts1);
add(l2, ts2);

v2 := values(l2);


### Testing l3 #############
st1: stack of int;
st2: stack of int;

push(st1, 1);
push(st1, 1);
push(st2, 2);
push(st2, 2);

add(l3, st1);
add(l3, st2);

v3 := values(l3);


### Testing l4 #############
m1: map[int] of int;
m2: map[int] of int;

m1[1] = 1;
m2[2] = 2;

add(l4, m1);
add(l4, m2);

v4 := values(l4);

foreach(i: int; v4[i]){
	v5 := values(v4[i]);
	o << v5[0];
}

### Testing l5 #############
list1: list of int;
list2: list of int;

add(list1, 1);
add(list2, 2);

add(l5, list1);
add(l5, list2);

v5 := values(l5);

### Testing l6 #############
q1: queue of int;
q2: queue of int;

offer(q1, 1);
offer(q2, 2);

add(l6, q1);
add(l6, q2);

v6 := values(l6);